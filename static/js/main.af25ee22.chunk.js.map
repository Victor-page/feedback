{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptionsList/FeedbackOption/FeedbackOption.js","components/FeedbackOptionsList/FeedbackOptionsList.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js","components/FeedbackOptionsList/FeedbackOption/FeedbackOption.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOption","onLeaveFeedback","label","className","classes","feedbackOption","onClick","FeedbackOptionsList","options","map","option","Section","title","children","Notification","message","App","state","handleFeedback","buttonLabel","target","textContent","setState","previousState","countTotalFeedback","Object","values","reduce","previousValue","currentValue","countPositiveFeedbackPercentage","Math","round","this","buttonLabels","keys","isFeedback","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uNA2CeA,EAzCI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,+BACE,6BACE,uCACQ,+BAAOJ,SAGjB,6BACE,0CACW,+BAAOC,SAGpB,6BACE,sCACO,+BAAOC,SAGhB,6BACE,wCACS,+BAAOC,SAGlB,6BACE,mDAEE,qCAAQC,EAAR,gB,gBCbKC,EAXQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,MAApB,OACrB,wBAAQC,UAAWC,IAAQC,eAAgBC,QAASL,EAApD,SACGC,KCWUK,EAba,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASP,EAAZ,EAAYA,gBAAZ,OAC1BO,EAAQC,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAEET,gBAAiBA,EACjBC,MAAOQ,GAFFA,OCOIC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCGUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCKpCC,E,4MAGJC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,eAAiB,YAA+C,IAArBC,EAAoB,EAA3CC,OAAUC,YAC5B,EAAKC,UAAS,SAACC,GAAD,sBACXJ,EAAcI,EAAcJ,GAAe,O,EAIhDK,mBAAqB,WAKnB,OAJeC,OAAOC,OAAO,EAAKT,OAIpBU,QAHE,SAACC,EAAeC,GAAhB,OACdD,EAAgBC,M,EAKpBC,gCAAkC,kBAChCC,KAAKC,MAAO,IAAM,EAAKf,MAAMtB,KAAQ,EAAK6B,uB,4CAE5C,WACE,MAA+BS,KAAKhB,MAA5BtB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBqC,EAAeT,OAAOU,KAAK,CAAExC,OAAMC,UAASC,QAC5CuC,EAAazC,GAAQC,GAAWC,EAEtC,OACE,qCACE,cAAC,EAAD,CAASe,MAAM,wBAAf,SACE,cAAC,EAAD,CACEJ,QAAS0B,EACTjC,gBAAiBgC,KAAKf,mBAIzBkB,EACC,cAAC,EAAD,CAASxB,MAAM,aAAf,SACE,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmC,KAAKT,qBACZzB,mBAAoBkC,KAAKH,sCAI7B,cAAC,EAAD,UACE,cAAC,EAAD,CAAcf,QAAQ,iC,GApDhBsB,aA4DHrB,IC9DfsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,eAAiB,0C","file":"static/js/main.af25ee22.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <p>\r\n          Good: <span>{good}</span>\r\n        </p>\r\n      </li>\r\n      <li>\r\n        <p>\r\n          Neutral: <span>{neutral}</span>\r\n        </p>\r\n      </li>\r\n      <li>\r\n        <p>\r\n          Bad: <span>{bad}</span>\r\n        </p>\r\n      </li>\r\n      <li>\r\n        <p>\r\n          Total: <span>{total}</span>\r\n        </p>\r\n      </li>\r\n      <li>\r\n        <p>\r\n          Positive feedback:\r\n          <span> {positivePercentage}%</span>\r\n        </p>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  neutral: PropTypes.number.isRequired,\r\n  good: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport classes from './FeedbackOption.module.css';\r\n\r\nconst FeedbackOption = ({ onLeaveFeedback, label }) => (\r\n  <button className={classes.feedbackOption} onClick={onLeaveFeedback}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\nFeedbackOption.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOption;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport FeedbackOption from './FeedbackOption/FeedbackOption';\r\n\r\nconst FeedbackOptionsList = ({ options, onLeaveFeedback }) =>\r\n  options.map((option) => (\r\n    <FeedbackOption\r\n      key={option}\r\n      onLeaveFeedback={onLeaveFeedback}\r\n      label={option}\r\n    />\r\n  ));\r\n\r\nFeedbackOptionsList.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default FeedbackOptionsList;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from 'react';\r\n\r\nimport Statistics from 'components/Statistics';\r\nimport FeedbackOptionsList from 'components/FeedbackOptionsList';\r\nimport Section from 'components/Section';\r\nimport Notification from 'components/Notification';\r\n\r\nclass App extends Component {\r\n  static propTypes = {};\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleFeedback = ({ target: { textContent: buttonLabel } }) => {\r\n    this.setState((previousState) => ({\r\n      [buttonLabel]: previousState[buttonLabel] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const values = Object.values(this.state);\r\n    const reducer = (previousValue, currentValue) =>\r\n      previousValue + currentValue;\r\n\r\n    return values.reduce(reducer);\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.round((100 * this.state.good) / this.countTotalFeedback());\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const buttonLabels = Object.keys({ good, neutral, bad });\r\n    const isFeedback = good || neutral || bad;\r\n\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptionsList\r\n            options={buttonLabels}\r\n            onLeaveFeedback={this.handleFeedback}\r\n          />\r\n        </Section>\r\n\r\n        {isFeedback ? (\r\n          <Section title=\"Statistics\">\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          </Section>\r\n        ) : (\r\n          <Section>\r\n            <Notification message=\"There's no feedback\" />\r\n          </Section>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackOption\":\"FeedbackOption_feedbackOption__2eeSG\"};"],"sourceRoot":""}